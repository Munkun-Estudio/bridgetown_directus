say_status :directus, "Installing the bridgetown_directus plugin..."

# Prompt the user for Directus API URL and Auth Token
api_url = ask("What's your Directus instance URL? (Example: https://your-instance.example.com)")
auth_token = ask("What's your Directus API auth token? (Leave blank to use ENV['DIRECTUS_API_TOKEN'])")
directus_collection = ask("What's the Directus collection name (API endpoint/model)? (Example: posts)")
bridgetown_collection = ask("What's the Bridgetown collection name (used for folder and resource)? (Example: posts)")

# Add the bridgetown_directus gem
add_gem "bridgetown_directus"

# Add minimal Directus configuration to config/initializers.rb in the idiomatic Bridgetown plugin style
add_initializer :bridgetown_directus do |directus|
  <<~RUBY
    # This block was generated by bridgetown_directus automation.
    # All Directus configuration is now handled here (not in YAML).
    # Set DIRECTUS_API_URL and DIRECTUS_API_TOKEN in your .env or shell environment.
    #
    # By default, ALL fields from Directus will be written to the front matter of generated Markdown files.
    # You only need to declare fields here if you want to:
    #   - Rename a field in the output
    #   - Transform/convert a field value (e.g., format a date, generate a slug, etc.)
    #   - Set a default value if a field is missing
    #
    # Example: To customize or transform fields, use the c.field declaration:
    #   # require "securerandom" # Uncomment if you use SecureRandom in your mapping
    #   c.field :slug, "slug" do |value|
    #     value || "post-#{SecureRandom.hex(4)}"
    #   end
    #
    # ---
    # TRANSLATIONS:
    # To enable translations for specific fields, add this line inside your collection block:
    #   c.enable_translations([:title, :content])
    # You can list any field that exists in your Directus collection, even if it's not declared above with c.field.
    # Declaring a field with c.field is only required if you want to rename, transform, or set a default for it.
    # ---

    directus.api_url = ENV["DIRECTUS_API_URL"] || "#{api_url}"
    directus.token = ENV["DIRECTUS_API_TOKEN"] || "#{auth_token}"

    directus.register_collection(:#{bridgetown_collection}) do |c|
      c.endpoint = "#{directus_collection}"
      c.layout = "#{bridgetown_collection.to_s.singularize}"
      # Minimal mapping (optional):
      c.field :id, "id"
      c.field :title, "title"
      # Add more c.field declarations above as needed for custom logic.
      # To enable translations, uncomment and edit the following line:
      # c.enable_translations([:title, :content])
    end
  RUBY
end

say_status :success, "Bridgetown Directus plugin has been installed!", :green
say_status :directus, "Check config/initializers.rb for your Directus setup."
say_status :directus, "Check bridgetown.config.yml for your collection setup."

# Only remind the user to create a layout if it's a custom collection (not 'posts' or 'pages')
if !%w[posts pages].include?(bridgetown_collection.to_s)
  say_status :directus, "Don't forget to create a layout file at src/_layouts/#{bridgetown_collection.to_s.singularize}.erb for your custom collection pages!"
end

say_status :directus, "For advanced usage and field customization, see the README: https://github.com/Munkun-Estudio/bridgetown_directus"